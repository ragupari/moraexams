---
import Slideshow1 from "../components/slideshow1.astro";

import { getLangFromUrl, useTranslations } from "../i18n/utils";

const t = useTranslations(getLangFromUrl(Astro.url));

const images = [
	["/assets/backgrounds/pic5.jpg", "Jaffna"],
	["/assets/backgrounds/pic6.jpg", "Hello"],
	["/assets/backgrounds/pic7.jpg", "Caption 3"],
	["/assets/backgrounds/pic10.jpg", "Caption 4"],
	["/assets/backgrounds/pic11.jpg", "Caption 5"],
	["/assets/backgrounds/pic12.jpg", "Caption 6"],
];
---

<section
	class="lineUp section_hero pt-32 sm:pt-20 pb-4 px-[var(--body-margin-x)] text-white top-0 bottom-0 z-[2] flex items-left"
>
	<!-- <img class="h-24 sm:h-32" src="/logo.png" /> -->
	<h1 class="text-2xl section_h1 sm:text-5xl md:text-7xl max-w-[20ch]">
		<span class="text-center">{t("index__title")}</span><br />
		<span
			class="text-xl sm:text-2xl md:text-4xl !leading-snug font-light text-left p-0"
			>{t("hero__title")}</span
		>
	</h1>
	<div class="slideshow_container_main">
		<center>
			<div class="slideshow-container">
				{
					images.map((image, index) => (
						<div
							class="slides fade"
							style="max-width: 1200px; display: flex; justify-content: center; align-items: center;"
						>
							<img
								src={image[0]}
								class="image_slideshow-container"
								id="image"
							/>
							<div class="caption">{image[1]}</div>
						</div>
					))
				}
				<a class="prev">&#10094;</a>
				<a class="next">&#10095;</a>
			</div>
			<br />

			<div class="dots">
				{images.map(() => <span class="dot" />)}
			</div>
		</center>
	</div>

	<!-- <div
		class="text-[16px] sm:text-[24px] flex flex-col gap-y-6 mt-8 w-fit"
		style="padding-bottom: 30px;"
	>
		<a href="./results" class="no-underline">
			<button class="btn">
				<span>
					{t("hero_results_button")}
				</span>
				<i
					class="fa-solid fa-arrow-right translate-x-[10px] transition-transform pr-2"
				></i>
			</button>
		</a>
		<a
			href="./find-your-index-number"
			class="text-white no-underline hover:underline w-full inline-block"
		>
			<button class="btn !w-full">{t("hero_index_button")}</button>
		</a>
	</div> -->
</section>

<script>
	let slideIndex = 1;
	let timing = 5000;

	function showSlides(n) {
		const slides = document.getElementsByClassName("slides");
		const dots = document.getElementsByClassName("dot");

		if (n > slides.length) {
			slideIndex = 1;
		}
		if (n < 1) {
			slideIndex = slides.length;
		}

		for (let i = 0; i < slides.length; i++) {
			(slides[i] as HTMLElement).style.display = "none";
		}

		for (let i = 0; i < dots.length; i++) {
			dots[i].className = dots[i].className.replace(" active", "");
		}

		(slides[slideIndex - 1] as HTMLElement).style.display = "block";
		dots[slideIndex - 1].className += " active";
	}

	function plusSlides(n) {
		showSlides((slideIndex += n));
	}

	function currentSlide(n) {
		showSlides((slideIndex = n));
	}

	function autoShowSlides() {
		plusSlides(1);
	}

	document.addEventListener("DOMContentLoaded", () => {
		showSlides(slideIndex);

		document
			.querySelector(".prev")
			.addEventListener("click", () => plusSlides(-1));
		document
			.querySelector(".next")
			.addEventListener("click", () => plusSlides(1));

		const dots = document.getElementsByClassName("dot");
		for (let i = 0; i < dots.length; i++) {
			dots[i].addEventListener("click", () => currentSlide(i + 1));
		}

		setInterval(autoShowSlides, timing); // Change slide every 3 seconds
	});
	(() => {
		const logoTitles = document.querySelectorAll(".logo-title");
		// console.log(logoTitles);
		if (logoTitles.length == 0) {
			return;
		}
		const observer = new IntersectionObserver(
			(entries) => {
				const entry = entries[0];

				for (const item of [logoTitles]) {
					if (!(item instanceof HTMLAnchorElement)) {
						continue;
					}

					if (entry.isIntersecting) {
						// visible
						item.style.color = "transparent";
					} else {
						item.style.color = "inherit";
					}
				}
			},
			{
				rootMargin: "-30px 0px 0px 0px",
				threshold: 1,
			},
		);

		const h1Elements = document.querySelectorAll("h1");
		if (h1Elements.length != 1) {
			throw new Error("An HTML page must contain one and only h1 element.");
		}
		setTimeout(() => {
			observer.observe(h1Elements.item(0));
		}, 3000);
	})();
</script>

<style>
	.slideshow-container {
		max-width: 100%;
		margin: 0;
		padding: 0;
		display: flex;
		justify-content: center;
		align-items: center;
		position: relative;
	}

	.slides {
		display: none;
	}

	.prev,
	.next {
		display: none;
		cursor: pointer;
		position: absolute;
		top: 50%;
		width: auto;
		padding: 16px;
		color: white;
		font-weight: bold;
		font-size: 18px;
		transition: 0.6s ease;
		border-radius: 0 3px 3px 0;
		user-select: none;
	}

	.next {
		right: 0;
		border-radius: 3px 0 0 3px;
	}

	.prev:hover,
	.next:hover {
		background-color: rgba(0, 0, 0, 0.8);
	}

	.dots {
		text-align: center;
		margin-top: 20px;
		padding: 10px 0;
		background: rgba(0, 0, 0, 0.5);
		max-width: 400px;
		margin-bottom: 20px;
		border-radius: 2em;
	}

	.dot {
		cursor: pointer;
		height: 15px;
		width: 15px;
		margin: 0 3px;
		background-color: #bbb;
		border-radius: 50%;
		display: inline-block;
		transition: background-color 0.6s ease;
	}

	.active,
	.dot:hover {
		background-color: #717171;
	}

	.fade {
		-webkit-animation-name: fade;
		-webkit-animation-duration: 1.5s;
		animation-name: fade;
		animation-duration: 1.5s;
	}

	@-webkit-keyframes fade {
		from {
			opacity: 0.4;
		}
		to {
			opacity: 1;
		}
	}

	@keyframes fade {
		from {
			opacity: 0.4;
		}
		to {
			opacity: 1;
		}
	}

	.image_slideshow-container {
		width: 80%;
		object-fit: contain;
		border: 1px solid black;
		box-shadow: rgba(0, 0, 0, 0.25) 0px 25px 50px -12px;
		border-radius: 1rem;
		transition: transform 2s ease 0s;
	}
	.image_slideshow-container:hover {
		transform: perspective(3000px) rotateY(2deg);
	}

	.caption {
		color: rgb(251, 251, 251);
		font-size: 1.2rem;
		position: absolute;
		bottom: 10px;
		text-align: center;
		width: 100%;
		margin-bottom: -45px;
	}

	button:hover i {
		@apply translate-x-[16px];
	}
	.btn {
		@apply text-white w-fit px-5 py-3 text-[1em];
		background: linear-gradient(135deg, #852d91, #312a6c);
		transition: all 0.3s cubic-bezier(0.02, 0.01, 0.47, 1);
		font-weight: bold;
		border: 0;
		outline-color: hsl(243, 31%, 60%);
		outline-width: 2px;
		border-radius: 0.5rem;
		cursor: pointer;
	}
	.btn:hover {
		color: #cfcece;
		border: none;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
		animation: rotate 0.7s ease-in-out both;
	}

	.btn:hover:before,
	.btn:hover:after {
		opacity: 0.15;
	}
	.btn:hover:before {
		transform: translate3d(50%, 0, 0) scale(0.9);
	}
	.btn:hover:after {
		transform: translate(50%, 0) scale(1.1);
	}
	@keyframes rotate {
		0% {
			transform: rotate(0deg);
		}
		25% {
			transform: rotate(3deg);
		}
		50% {
			transform: rotate(-3deg);
		}
		75% {
			transform: rotate(1deg);
		}
		100% {
			transform: rotate(0deg);
		}
	}
	.lineUp {
		animation: 3s anim-lineUp ease-out;
	}
	@keyframes anim-lineUp {
		0% {
			opacity: 0;
			transform: translateY(80%);
		}
		20% {
			opacity: 0;
		}
		50% {
			opacity: 1;
			transform: translateY(0%);
		}
		100% {
			opacity: 1;
			transform: translateY(0%);
		}
	}
	.btn > * {
		@apply inline-block align-middle h-fit;
	}

	.section_hero {
		margin: 0;
		padding: 0 10%;
		display: flex-box;
		flex-direction: row;
		justify-content: center;
		align-items: center;
		height: 88vh;
		/* background: url(../../public/assets/backgrounds/bg2.png); */
	}

	.slideshow_container_main {
		padding-top: 30px;
	}

	.picture_heading {
		text-decoration: none;
		margin: 30px;
		font-size: 3em;
		text-align: center;
	}
	.section_h1 {
		text-align: left;
	}
	@media only screen and (max-width: 800px) {
		.section_hero {
			flex-direction: column;
		}
		.section_h1 {
			text-align: center;
		}
		.dots {
			padding: 3px 0;
		}
		.dot {
			height: 9px;
			width: 9px;
			margin: 0 4px;
		}
	}
</style>

<!-- todo: generalize buttons, can use passing arguments or classes to unify the button components -->
<!-- todo: make the hero page more modular, ability to implement countdowns and removing buttons and replacing with sponsor messages when needed -->
<!-- todo: fix hero display for mobile view (make it more efficient) -->
